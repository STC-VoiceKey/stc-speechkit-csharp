/* 
 * TTS documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.73
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloud.Client.SwaggerDateConverter;

namespace Cloud.Client.TTS.Model
{
    /// <summary>
    /// CloseTransactionResponse
    /// </summary>
    [DataContract]
    public partial class CloseTransactionResponse :  IEquatable<CloseTransactionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseTransactionResponse" /> class.
        /// </summary>
        /// <param name="TransactionId">TransactionId.</param>
        /// <param name="SynthesizeTextSize">SynthesizeTextSize.</param>
        public CloseTransactionResponse(string TransactionId = default(string), long? SynthesizeTextSize = default(long?))
        {
            this.TransactionId = TransactionId;
            this.SynthesizeTextSize = SynthesizeTextSize;
        }
        
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SynthesizeTextSize
        /// </summary>
        [DataMember(Name="synthesize_text_size", EmitDefaultValue=false)]
        public long? SynthesizeTextSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloseTransactionResponse {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SynthesizeTextSize: ").Append(SynthesizeTextSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloseTransactionResponse);
        }

        /// <summary>
        /// Returns true if CloseTransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CloseTransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloseTransactionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.SynthesizeTextSize == input.SynthesizeTextSize ||
                    (this.SynthesizeTextSize != null &&
                    this.SynthesizeTextSize.Equals(input.SynthesizeTextSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.SynthesizeTextSize != null)
                    hashCode = hashCode * 59 + this.SynthesizeTextSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
