/* 
 * TTS documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloud.TTS.Client;
using Cloud.TTS.Model;

namespace Cloud.TTS.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>List&lt;SynthesizeLanguage&gt;</returns>
        List<SynthesizeLanguage> LanguageVoicesSupport (Guid? xSessionID);

        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>ApiResponse of List&lt;SynthesizeLanguage&gt;</returns>
        ApiResponse<List<SynthesizeLanguage>> LanguageVoicesSupportWithHttpInfo (Guid? xSessionID);
        /// <summary>
        /// Synthesize speech from text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>SynthesizeResponse</returns>
        SynthesizeResponse Synthesize (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null);

        /// <summary>
        /// Synthesize speech from text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of SynthesizeResponse</returns>
        ApiResponse<SynthesizeResponse> SynthesizeWithHttpInfo (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null);
        /// <summary>
        /// Synthesize speech from text without session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>SynthesizeResponse</returns>
        SynthesizeResponse SynthesizeSessionless (SynthesizeSessionlessRequest body, string xRequestId = null);

        /// <summary>
        /// Synthesize speech from text without session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of SynthesizeResponse</returns>
        ApiResponse<SynthesizeResponse> SynthesizeSessionlessWithHttpInfo (SynthesizeSessionlessRequest body, string xRequestId = null);
        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>List&lt;SynthesizeVoiceType&gt;</returns>
        List<SynthesizeVoiceType> Voices (Guid? xSessionID, string language);

        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>ApiResponse of List&lt;SynthesizeVoiceType&gt;</returns>
        ApiResponse<List<SynthesizeVoiceType>> VoicesWithHttpInfo (Guid? xSessionID, string language);
        /// <summary>
        /// Get websocket connection param
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>WebSocketServerConfigurationResponse</returns>
        WebSocketServerConfigurationResponse WebSocketStream (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null);

        /// <summary>
        /// Get websocket connection param
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of WebSocketServerConfigurationResponse</returns>
        ApiResponse<WebSocketServerConfigurationResponse> WebSocketStreamWithHttpInfo (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null);
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>CloseTransactionResponse</returns>
        CloseTransactionResponse WebSocketStream_0 (Guid? xSessionID, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>ApiResponse of CloseTransactionResponse</returns>
        ApiResponse<CloseTransactionResponse> WebSocketStream_0WithHttpInfo (Guid? xSessionID, Guid? xTransactionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>Task of List&lt;SynthesizeLanguage&gt;</returns>
        System.Threading.Tasks.Task<List<SynthesizeLanguage>> LanguageVoicesSupportAsync (Guid? xSessionID);

        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>Task of ApiResponse (List&lt;SynthesizeLanguage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SynthesizeLanguage>>> LanguageVoicesSupportAsyncWithHttpInfo (Guid? xSessionID);
        /// <summary>
        /// Synthesize speech from text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of SynthesizeResponse</returns>
        System.Threading.Tasks.Task<SynthesizeResponse> SynthesizeAsync (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null);

        /// <summary>
        /// Synthesize speech from text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (SynthesizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SynthesizeResponse>> SynthesizeAsyncWithHttpInfo (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null);
        /// <summary>
        /// Synthesize speech from text without session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of SynthesizeResponse</returns>
        System.Threading.Tasks.Task<SynthesizeResponse> SynthesizeSessionlessAsync (SynthesizeSessionlessRequest body, string xRequestId = null);

        /// <summary>
        /// Synthesize speech from text without session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (SynthesizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SynthesizeResponse>> SynthesizeSessionlessAsyncWithHttpInfo (SynthesizeSessionlessRequest body, string xRequestId = null);
        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>Task of List&lt;SynthesizeVoiceType&gt;</returns>
        System.Threading.Tasks.Task<List<SynthesizeVoiceType>> VoicesAsync (Guid? xSessionID, string language);

        /// <summary>
        /// Available languages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>Task of ApiResponse (List&lt;SynthesizeVoiceType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SynthesizeVoiceType>>> VoicesAsyncWithHttpInfo (Guid? xSessionID, string language);
        /// <summary>
        /// Get websocket connection param
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of WebSocketServerConfigurationResponse</returns>
        System.Threading.Tasks.Task<WebSocketServerConfigurationResponse> WebSocketStreamAsync (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null);

        /// <summary>
        /// Get websocket connection param
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (WebSocketServerConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebSocketServerConfigurationResponse>> WebSocketStreamAsyncWithHttpInfo (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null);
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>Task of CloseTransactionResponse</returns>
        System.Threading.Tasks.Task<CloseTransactionResponse> WebSocketStream_0Async (Guid? xSessionID, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>Task of ApiResponse (CloseTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloseTransactionResponse>> WebSocketStream_0AsyncWithHttpInfo (Guid? xSessionID, Guid? xTransactionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SynthesizeApi : IV1Api
    {
        private Cloud.TTS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SynthesizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SynthesizeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloud.TTS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SynthesizeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SynthesizeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloud.TTS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.TTS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>List&lt;SynthesizeLanguage&gt;</returns>
        public List<SynthesizeLanguage> LanguageVoicesSupport (Guid? xSessionID)
        {
             ApiResponse<List<SynthesizeLanguage>> localVarResponse = LanguageVoicesSupportWithHttpInfo(xSessionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>ApiResponse of List&lt;SynthesizeLanguage&gt;</returns>
        public ApiResponse< List<SynthesizeLanguage> > LanguageVoicesSupportWithHttpInfo (Guid? xSessionID)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->LanguageVoicesSupport");

            var localVarPath = "vktts/rest/v1/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LanguageVoicesSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SynthesizeLanguage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SynthesizeLanguage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SynthesizeLanguage>)));
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>Task of List&lt;SynthesizeLanguage&gt;</returns>
        public async System.Threading.Tasks.Task<List<SynthesizeLanguage>> LanguageVoicesSupportAsync (Guid? xSessionID)
        {
             ApiResponse<List<SynthesizeLanguage>> localVarResponse = await LanguageVoicesSupportAsyncWithHttpInfo(xSessionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <returns>Task of ApiResponse (List&lt;SynthesizeLanguage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SynthesizeLanguage>>> LanguageVoicesSupportAsyncWithHttpInfo (Guid? xSessionID)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->LanguageVoicesSupport");

            var localVarPath = "vktts/rest/v1/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LanguageVoicesSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SynthesizeLanguage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SynthesizeLanguage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SynthesizeLanguage>)));
        }

        /// <summary>
        /// Synthesize speech from text 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>SynthesizeResponse</returns>
        public SynthesizeResponse Synthesize (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null)
        {
             ApiResponse<SynthesizeResponse> localVarResponse = SynthesizeWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Synthesize speech from text 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of SynthesizeResponse</returns>
        public ApiResponse< SynthesizeResponse > SynthesizeWithHttpInfo (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->Synthesize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->Synthesize");

            var localVarPath = "vktts/rest/v1/synthesize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Synthesize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SynthesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SynthesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SynthesizeResponse)));
        }

        /// <summary>
        /// Synthesize speech from text 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of SynthesizeResponse</returns>
        public async System.Threading.Tasks.Task<SynthesizeResponse> SynthesizeAsync (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null)
        {
             ApiResponse<SynthesizeResponse> localVarResponse = await SynthesizeAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Synthesize speech from text 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (SynthesizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SynthesizeResponse>> SynthesizeAsyncWithHttpInfo (Guid? xSessionID, SynthesizeRequest body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->Synthesize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->Synthesize");

            var localVarPath = "vktts/rest/v1/synthesize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Synthesize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SynthesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SynthesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SynthesizeResponse)));
        }

        /// <summary>
        /// Synthesize speech from text without session 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>SynthesizeResponse</returns>
        public SynthesizeResponse SynthesizeSessionless (SynthesizeSessionlessRequest body, string xRequestId = null)
        {
             ApiResponse<SynthesizeResponse> localVarResponse = SynthesizeSessionlessWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Synthesize speech from text without session 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of SynthesizeResponse</returns>
        public ApiResponse< SynthesizeResponse > SynthesizeSessionlessWithHttpInfo (SynthesizeSessionlessRequest body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->SynthesizeSessionless");

            var localVarPath = "vktts/rest/v1/synthesize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SynthesizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SynthesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SynthesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SynthesizeResponse)));
        }

        /// <summary>
        /// Synthesize speech from text without session 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of SynthesizeResponse</returns>
        public async System.Threading.Tasks.Task<SynthesizeResponse> SynthesizeSessionlessAsync (SynthesizeSessionlessRequest body, string xRequestId = null)
        {
             ApiResponse<SynthesizeResponse> localVarResponse = await SynthesizeSessionlessAsyncWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Synthesize speech from text without session 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (SynthesizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SynthesizeResponse>> SynthesizeSessionlessAsyncWithHttpInfo (SynthesizeSessionlessRequest body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->SynthesizeSessionless");

            var localVarPath = "vktts/rest/v1/synthesize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SynthesizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SynthesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SynthesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SynthesizeResponse)));
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>List&lt;SynthesizeVoiceType&gt;</returns>
        public List<SynthesizeVoiceType> Voices (Guid? xSessionID, string language)
        {
             ApiResponse<List<SynthesizeVoiceType>> localVarResponse = VoicesWithHttpInfo(xSessionID, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>ApiResponse of List&lt;SynthesizeVoiceType&gt;</returns>
        public ApiResponse< List<SynthesizeVoiceType> > VoicesWithHttpInfo (Guid? xSessionID, string language)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->Voices");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling V1Api->Voices");

            var localVarPath = "vktts/rest/v1/languages/{language}/voices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Voices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SynthesizeVoiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SynthesizeVoiceType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SynthesizeVoiceType>)));
        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>Task of List&lt;SynthesizeVoiceType&gt;</returns>
        public async System.Threading.Tasks.Task<List<SynthesizeVoiceType>> VoicesAsync (Guid? xSessionID, string language)
        {
             ApiResponse<List<SynthesizeVoiceType>> localVarResponse = await VoicesAsyncWithHttpInfo(xSessionID, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available languages 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="language">Language name</param>
        /// <returns>Task of ApiResponse (List&lt;SynthesizeVoiceType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SynthesizeVoiceType>>> VoicesAsyncWithHttpInfo (Guid? xSessionID, string language)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->Voices");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling V1Api->Voices");

            var localVarPath = "vktts/rest/v1/languages/{language}/voices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarPathParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Voices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SynthesizeVoiceType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SynthesizeVoiceType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SynthesizeVoiceType>)));
        }

        /// <summary>
        /// Get websocket connection param 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>WebSocketServerConfigurationResponse</returns>
        public WebSocketServerConfigurationResponse WebSocketStream (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null)
        {
             ApiResponse<WebSocketServerConfigurationResponse> localVarResponse = WebSocketStreamWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get websocket connection param 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of WebSocketServerConfigurationResponse</returns>
        public ApiResponse< WebSocketServerConfigurationResponse > WebSocketStreamWithHttpInfo (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->WebSocketStream");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->WebSocketStream");

            var localVarPath = "vktts/rest/v1/synthesize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebSocketStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebSocketServerConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebSocketServerConfigurationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebSocketServerConfigurationResponse)));
        }

        /// <summary>
        /// Get websocket connection param 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of WebSocketServerConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<WebSocketServerConfigurationResponse> WebSocketStreamAsync (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null)
        {
             ApiResponse<WebSocketServerConfigurationResponse> localVarResponse = await WebSocketStreamAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get websocket connection param 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Synthesize param</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (WebSocketServerConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebSocketServerConfigurationResponse>> WebSocketStreamAsyncWithHttpInfo (Guid? xSessionID, WebSocketSynthesizeRequest body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->WebSocketStream");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1Api->WebSocketStream");

            var localVarPath = "vktts/rest/v1/synthesize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebSocketStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebSocketServerConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebSocketServerConfigurationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebSocketServerConfigurationResponse)));
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>CloseTransactionResponse</returns>
        public CloseTransactionResponse WebSocketStream_0 (Guid? xSessionID, Guid? xTransactionId)
        {
             ApiResponse<CloseTransactionResponse> localVarResponse = WebSocketStream_0WithHttpInfo(xSessionID, xTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>ApiResponse of CloseTransactionResponse</returns>
        public ApiResponse< CloseTransactionResponse > WebSocketStream_0WithHttpInfo (Guid? xSessionID, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->WebSocketStream_0");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling V1Api->WebSocketStream_0");

            var localVarPath = "vktts/rest/v1/synthesize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebSocketStream_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloseTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloseTransactionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloseTransactionResponse)));
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>Task of CloseTransactionResponse</returns>
        public async System.Threading.Tasks.Task<CloseTransactionResponse> WebSocketStream_0Async (Guid? xSessionID, Guid? xTransactionId)
        {
             ApiResponse<CloseTransactionResponse> localVarResponse = await WebSocketStream_0AsyncWithHttpInfo(xSessionID, xTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.TTS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Transaction identifier</param>
        /// <returns>Task of ApiResponse (CloseTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloseTransactionResponse>> WebSocketStream_0AsyncWithHttpInfo (Guid? xSessionID, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling V1Api->WebSocketStream_0");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling V1Api->WebSocketStream_0");

            var localVarPath = "vktts/rest/v1/synthesize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebSocketStream_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloseTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloseTransactionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloseTransactionResponse)));
        }

    }
}
