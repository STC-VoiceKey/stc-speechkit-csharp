/* 
 * ASR documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloud.Client.SwaggerDateConverter;

namespace Cloud.Client.ASR.Model
{
    /// <summary>
    /// WordDto
    /// </summary>
    [DataContract]
    public partial class WordDto :  IEquatable<WordDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WordDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WordDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WordDto" /> class.
        /// </summary>
        /// <param name="Word">Recognized word (required).</param>
        /// <param name="Score">Recognition confidence (0 - 100.00) (required).</param>
        /// <param name="Begin">Time stamp on which this word was found.</param>
        /// <param name="Length">Word duration.</param>
        public WordDto(string Word = default(string), string Score = default(string), string Begin = default(string), string Length = default(string))
        {
            // to ensure "Word" is required (not null)
            if (Word == null)
            {
                throw new InvalidDataException("Word is a required property for WordDto and cannot be null");
            }
            else
            {
                this.Word = Word;
            }
            // to ensure "Score" is required (not null)
            if (Score == null)
            {
                throw new InvalidDataException("Score is a required property for WordDto and cannot be null");
            }
            else
            {
                this.Score = Score;
            }
            this.Begin = Begin;
            this.Length = Length;
        }
        
        /// <summary>
        /// Recognized word
        /// </summary>
        /// <value>Recognized word</value>
        [DataMember(Name="word", EmitDefaultValue=false)]
        public string Word { get; set; }

        /// <summary>
        /// Recognition confidence (0 - 100.00)
        /// </summary>
        /// <value>Recognition confidence (0 - 100.00)</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// Time stamp on which this word was found
        /// </summary>
        /// <value>Time stamp on which this word was found</value>
        [DataMember(Name="begin", EmitDefaultValue=false)]
        public string Begin { get; set; }

        /// <summary>
        /// Word duration
        /// </summary>
        /// <value>Word duration</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WordDto {\n");
            sb.Append("  Word: ").Append(Word).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Begin: ").Append(Begin).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WordDto);
        }

        /// <summary>
        /// Returns true if WordDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WordDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WordDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Word == input.Word ||
                    (this.Word != null &&
                    this.Word.Equals(input.Word))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Begin == input.Begin ||
                    (this.Begin != null &&
                    this.Begin.Equals(input.Begin))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Word != null)
                    hashCode = hashCode * 59 + this.Word.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Begin != null)
                    hashCode = hashCode * 59 + this.Begin.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
