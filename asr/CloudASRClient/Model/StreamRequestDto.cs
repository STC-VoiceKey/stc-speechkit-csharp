/* 
 * ASR documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloud.Client.SwaggerDateConverter;

namespace Cloud.Client.ASR.Model
{
    /// <summary>
    /// StreamRequestDto
    /// </summary>
    [DataContract]
    public partial class StreamRequestDto :  IEquatable<StreamRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Recognize with package
        /// </summary>
        /// <value>Recognize with package</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageIdEnum
        {
            
            /// <summary>
            /// Enum Name for value: Package name
            /// </summary>
            [EnumMember(Value = "Package name")]
            Name = 1
        }

        /// <summary>
        /// Recognize with package
        /// </summary>
        /// <value>Recognize with package</value>
        [DataMember(Name="package_id", EmitDefaultValue=false)]
        public PackageIdEnum? PackageId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamRequestDto" /> class.
        /// </summary>
        /// <param name="PackageId">Recognize with package.</param>
        /// <param name="Mime">Audio file mime type (required).</param>
        public StreamRequestDto(PackageIdEnum? PackageId = default(PackageIdEnum?), string Mime = default(string))
        {
            // to ensure "Mime" is required (not null)
            if (Mime == null)
            {
                throw new InvalidDataException("Mime is a required property for StreamRequestDto and cannot be null");
            }
            else
            {
                this.Mime = Mime;
            }
            this.PackageId = PackageId;
        }
        

        /// <summary>
        /// Audio file mime type
        /// </summary>
        /// <value>Audio file mime type</value>
        [DataMember(Name="mime", EmitDefaultValue=false)]
        public string Mime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamRequestDto {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamRequestDto);
        }

        /// <summary>
        /// Returns true if StreamRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.Mime == input.Mime ||
                    (this.Mime != null &&
                    this.Mime.Equals(input.Mime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.Mime != null)
                    hashCode = hashCode * 59 + this.Mime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
