/* 
 * ASR documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloud.Client.SwaggerDateConverter;

namespace Cloud.Client.ASR.Model
{
    /// <summary>
    /// ASRResultDto
    /// </summary>
    [DataContract]
    public partial class ASRResultDto :  IEquatable<ASRResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ASRResultDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ASRResultDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ASRResultDto" /> class.
        /// </summary>
        /// <param name="Score">Text score (required).</param>
        /// <param name="Text">Result text (required).</param>
        public ASRResultDto(string Score = default(string), string Text = default(string))
        {
            // to ensure "Score" is required (not null)
            if (Score == null)
            {
                throw new InvalidDataException("Score is a required property for ASRResultDto and cannot be null");
            }
            else
            {
                this.Score = Score;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for ASRResultDto and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
        }
        
        /// <summary>
        /// Text score
        /// </summary>
        /// <value>Text score</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// Result text
        /// </summary>
        /// <value>Result text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ASRResultDto {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ASRResultDto);
        }

        /// <summary>
        /// Returns true if ASRResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ASRResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ASRResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
