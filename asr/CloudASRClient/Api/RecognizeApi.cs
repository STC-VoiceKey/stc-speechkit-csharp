/* 
 * ASR documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloud.ASR.Client;
using Cloud.ASR.Model;

namespace Cloud.ASR.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecognizeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto Close (Guid? xSessionID, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> CloseWithHttpInfo (Guid? xSessionID, Guid? xTransactionId);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto Recognize (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> RecognizeWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech with advanced options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;ASRAdvancedResultDto&gt;</returns>
        List<ASRAdvancedResultDto> RecognizeAdvanced (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech with advanced options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;ASRAdvancedResultDto&gt;</returns>
        ApiResponse<List<ASRAdvancedResultDto>> RecognizeAdvancedWithHttpInfo (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto RecognizeSessionless (SessionlessRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> RecognizeSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        List<WordDto> RecognizeWords (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        ApiResponse<List<WordDto>> RecognizeWordsWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        List<WordDto> RecognizeWordsSessionless (SessionlessRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        ApiResponse<List<WordDto>> RecognizeWordsSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>StreamResponseDto</returns>
        StreamResponseDto Start (Guid? xSessionID, StreamRequestDto body, string xRequestId = null);

        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of StreamResponseDto</returns>
        ApiResponse<StreamResponseDto> StartWithHttpInfo (Guid? xSessionID, StreamRequestDto body, string xRequestId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> CloseAsync (Guid? xSessionID, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> CloseAsyncWithHttpInfo (Guid? xSessionID, Guid? xTransactionId);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> RecognizeAsync (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeAsyncWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech with advanced options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;ASRAdvancedResultDto&gt;</returns>
        System.Threading.Tasks.Task<List<ASRAdvancedResultDto>> RecognizeAdvancedAsync (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech with advanced options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ASRAdvancedResultDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ASRAdvancedResultDto>>> RecognizeAdvancedAsyncWithHttpInfo (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> RecognizeSessionlessAsync (SessionlessRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsAsync (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsAsyncWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsSessionlessAsync (SessionlessRecognitionRequestDto body, string xRequestId = null);

        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null);
        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of StreamResponseDto</returns>
        System.Threading.Tasks.Task<StreamResponseDto> StartAsync (Guid? xSessionID, StreamRequestDto body, string xRequestId = null);

        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (StreamResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResponseDto>> StartAsyncWithHttpInfo (Guid? xSessionID, StreamRequestDto body, string xRequestId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecognizeApi : IRecognizeApi
    {
        private Cloud.ASR.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecognizeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloud.ASR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecognizeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloud.ASR.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.ASR.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto Close (Guid? xSessionID, Guid? xTransactionId)
        {
             ApiResponse<ASRResultDto> localVarResponse = CloseWithHttpInfo(xSessionID, xTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > CloseWithHttpInfo (Guid? xSessionID, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Close");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling RecognizeApi->Close");

            var localVarPath = "vkasr/rest/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Close", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> CloseAsync (Guid? xSessionID, Guid? xTransactionId)
        {
             ApiResponse<ASRResultDto> localVarResponse = await CloseAsyncWithHttpInfo(xSessionID, xTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> CloseAsyncWithHttpInfo (Guid? xSessionID, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Close");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling RecognizeApi->Close");

            var localVarPath = "vkasr/rest/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Close", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto Recognize (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<ASRResultDto> localVarResponse = RecognizeWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > RecognizeWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Recognize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Recognize");

            var localVarPath = "vkasr/rest/v1/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Recognize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> RecognizeAsync (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<ASRResultDto> localVarResponse = await RecognizeAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeAsyncWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Recognize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Recognize");

            var localVarPath = "vkasr/rest/v1/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Recognize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Recognize speech with advanced options 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;ASRAdvancedResultDto&gt;</returns>
        public List<ASRAdvancedResultDto> RecognizeAdvanced (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<ASRAdvancedResultDto>> localVarResponse = RecognizeAdvancedWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize speech with advanced options 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;ASRAdvancedResultDto&gt;</returns>
        public ApiResponse< List<ASRAdvancedResultDto> > RecognizeAdvancedWithHttpInfo (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->RecognizeAdvanced");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeAdvanced");

            var localVarPath = "vkasr/rest/v1/recognize/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ASRAdvancedResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ASRAdvancedResultDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ASRAdvancedResultDto>)));
        }

        /// <summary>
        /// Recognize speech with advanced options 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;ASRAdvancedResultDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ASRAdvancedResultDto>> RecognizeAdvancedAsync (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<ASRAdvancedResultDto>> localVarResponse = await RecognizeAdvancedAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize speech with advanced options 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ASRAdvancedResultDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ASRAdvancedResultDto>>> RecognizeAdvancedAsyncWithHttpInfo (Guid? xSessionID, AdvancedRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->RecognizeAdvanced");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeAdvanced");

            var localVarPath = "vkasr/rest/v1/recognize/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ASRAdvancedResultDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ASRAdvancedResultDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ASRAdvancedResultDto>)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto RecognizeSessionless (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<ASRResultDto> localVarResponse = RecognizeSessionlessWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > RecognizeSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeSessionless");

            var localVarPath = "vkasr/rest/v1/recognize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> RecognizeSessionlessAsync (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<ASRResultDto> localVarResponse = await RecognizeSessionlessAsyncWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeSessionless");

            var localVarPath = "vkasr/rest/v1/recognize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        public List<WordDto> RecognizeWords (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<WordDto>> localVarResponse = RecognizeWordsWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        public ApiResponse< List<WordDto> > RecognizeWordsWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->RecognizeWords");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWords");

            var localVarPath = "vkasr/rest/v1/recognize/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsAsync (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<WordDto>> localVarResponse = await RecognizeWordsAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsAsyncWithHttpInfo (Guid? xSessionID, RecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->RecognizeWords");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWords");

            var localVarPath = "vkasr/rest/v1/recognize/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        public List<WordDto> RecognizeWordsSessionless (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<WordDto>> localVarResponse = RecognizeWordsSessionlessWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        public ApiResponse< List<WordDto> > RecognizeWordsSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWordsSessionless");

            var localVarPath = "vkasr/rest/v1/recognize/sessionless/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWordsSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsSessionlessAsync (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
             ApiResponse<List<WordDto>> localVarResponse = await RecognizeWordsSessionlessAsyncWithHttpInfo(body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWordsSessionless");

            var localVarPath = "vkasr/rest/v1/recognize/sessionless/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWordsSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>StreamResponseDto</returns>
        public StreamResponseDto Start (Guid? xSessionID, StreamRequestDto body, string xRequestId = null)
        {
             ApiResponse<StreamResponseDto> localVarResponse = StartWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>ApiResponse of StreamResponseDto</returns>
        public ApiResponse< StreamResponseDto > StartWithHttpInfo (Guid? xSessionID, StreamRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Start");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Start");

            var localVarPath = "vkasr/rest/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponseDto)));
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of StreamResponseDto</returns>
        public async System.Threading.Tasks.Task<StreamResponseDto> StartAsync (Guid? xSessionID, StreamRequestDto body, string xRequestId = null)
        {
             ApiResponse<StreamResponseDto> localVarResponse = await StartAsyncWithHttpInfo(xSessionID, body, xRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.ASR.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionID">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <param name="xRequestId">Request identifier (optional)</param>
        /// <returns>Task of ApiResponse (StreamResponseDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamResponseDto>> StartAsyncWithHttpInfo (Guid? xSessionID, StreamRequestDto body, string xRequestId = null)
        {
            // verify the required parameter 'xSessionID' is set
            if (xSessionID == null)
                throw new ApiException(400, "Missing required parameter 'xSessionID' when calling RecognizeApi->Start");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Start");

            var localVarPath = "vkasr/rest/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionID != null) localVarHeaderParams.Add("X-Session-ID", Configuration.ApiClient.ParameterToString(xSessionID)); // header parameter
            if (xRequestId != null) localVarHeaderParams.Add("X-Request-Id", Configuration.ApiClient.ParameterToString(xRequestId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponseDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponseDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponseDto)));
        }

    }
}
