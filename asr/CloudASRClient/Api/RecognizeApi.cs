/* 
 * ASR documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.58
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloud.Client;
using Cloud.Client.ASR.Model;

namespace Cloud.Client.ASR.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecognizeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto Close (Guid? xSessionId, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> CloseWithHttpInfo (Guid? xSessionId, Guid? xTransactionId);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto Recognize (Guid? xSessionId, RecognitionRequestDto body);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> RecognizeWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ASRResultDto</returns>
        ASRResultDto RecognizeSessionless (SessionlessRecognitionRequestDto body);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        ApiResponse<ASRResultDto> RecognizeSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body);
        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        List<WordDto> RecognizeWords (Guid? xSessionId, RecognitionRequestDto body);

        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        ApiResponse<List<WordDto>> RecognizeWordsWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body);
        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        List<WordDto> RecognizeWordsSessionless (SessionlessRecognitionRequestDto body);

        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        ApiResponse<List<WordDto>> RecognizeWordsSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body);
        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>WebSocketServerConfiguration</returns>
        WebSocketServerConfiguration Start (Guid? xSessionId, StreamRequestDto body);

        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>ApiResponse of WebSocketServerConfiguration</returns>
        ApiResponse<WebSocketServerConfiguration> StartWithHttpInfo (Guid? xSessionId, StreamRequestDto body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> CloseAsync (Guid? xSessionId, Guid? xTransactionId);

        /// <summary>
        /// Close transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> CloseAsyncWithHttpInfo (Guid? xSessionId, Guid? xTransactionId);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> RecognizeAsync (Guid? xSessionId, RecognitionRequestDto body);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeAsyncWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body);
        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ASRResultDto</returns>
        System.Threading.Tasks.Task<ASRResultDto> RecognizeSessionlessAsync (SessionlessRecognitionRequestDto body);

        /// <summary>
        /// Get speech recognition result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body);
        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsAsync (Guid? xSessionId, RecognitionRequestDto body);

        /// <summary>
        /// Recognize speech and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsAsyncWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body);
        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsSessionlessAsync (SessionlessRecognitionRequestDto body);

        /// <summary>
        /// Recognize speech without session and return word list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body);
        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>Task of WebSocketServerConfiguration</returns>
        System.Threading.Tasks.Task<WebSocketServerConfiguration> StartAsync (Guid? xSessionId, StreamRequestDto body);

        /// <summary>
        /// Start recognition stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>Task of ApiResponse (WebSocketServerConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebSocketServerConfiguration>> StartAsyncWithHttpInfo (Guid? xSessionId, StreamRequestDto body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecognizeApi : IRecognizeApi
    {
        private Cloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecognizeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecognizeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto Close (Guid? xSessionId, Guid? xTransactionId)
        {
             ApiResponse<ASRResultDto> localVarResponse = CloseWithHttpInfo(xSessionId, xTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > CloseWithHttpInfo (Guid? xSessionId, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Close");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling RecognizeApi->Close");

            var localVarPath = "/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Close", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> CloseAsync (Guid? xSessionId, Guid? xTransactionId)
        {
             ApiResponse<ASRResultDto> localVarResponse = await CloseAsyncWithHttpInfo(xSessionId, xTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close transaction 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="xTransactionId">Session identifier</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> CloseAsyncWithHttpInfo (Guid? xSessionId, Guid? xTransactionId)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Close");
            // verify the required parameter 'xTransactionId' is set
            if (xTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xTransactionId' when calling RecognizeApi->Close");

            var localVarPath = "/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (xTransactionId != null) localVarHeaderParams.Add("X-Transaction-Id", Configuration.ApiClient.ParameterToString(xTransactionId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Close", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto Recognize (Guid? xSessionId, RecognitionRequestDto body)
        {
             ApiResponse<ASRResultDto> localVarResponse = RecognizeWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > RecognizeWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Recognize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Recognize");

            var localVarPath = "/v1/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Recognize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> RecognizeAsync (Guid? xSessionId, RecognitionRequestDto body)
        {
             ApiResponse<ASRResultDto> localVarResponse = await RecognizeAsyncWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeAsyncWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Recognize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Recognize");

            var localVarPath = "/v1/recognize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Recognize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ASRResultDto</returns>
        public ASRResultDto RecognizeSessionless (SessionlessRecognitionRequestDto body)
        {
             ApiResponse<ASRResultDto> localVarResponse = RecognizeSessionlessWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ApiResponse of ASRResultDto</returns>
        public ApiResponse< ASRResultDto > RecognizeSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeSessionless");

            var localVarPath = "/v1/recognize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ASRResultDto</returns>
        public async System.Threading.Tasks.Task<ASRResultDto> RecognizeSessionlessAsync (SessionlessRecognitionRequestDto body)
        {
             ApiResponse<ASRResultDto> localVarResponse = await RecognizeSessionlessAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get speech recognition result 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ApiResponse (ASRResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ASRResultDto>> RecognizeSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeSessionless");

            var localVarPath = "/v1/recognize/sessionless";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ASRResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ASRResultDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ASRResultDto)));
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        public List<WordDto> RecognizeWords (Guid? xSessionId, RecognitionRequestDto body)
        {
             ApiResponse<List<WordDto>> localVarResponse = RecognizeWordsWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        public ApiResponse< List<WordDto> > RecognizeWordsWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->RecognizeWords");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWords");

            var localVarPath = "/v1/recognize/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsAsync (Guid? xSessionId, RecognitionRequestDto body)
        {
             ApiResponse<List<WordDto>> localVarResponse = await RecognizeWordsAsyncWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize speech and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Recognition request with audio file, mime type and package ID</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsAsyncWithHttpInfo (Guid? xSessionId, RecognitionRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->RecognizeWords");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWords");

            var localVarPath = "/v1/recognize/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>List&lt;WordDto&gt;</returns>
        public List<WordDto> RecognizeWordsSessionless (SessionlessRecognitionRequestDto body)
        {
             ApiResponse<List<WordDto>> localVarResponse = RecognizeWordsSessionlessWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>ApiResponse of List&lt;WordDto&gt;</returns>
        public ApiResponse< List<WordDto> > RecognizeWordsSessionlessWithHttpInfo (SessionlessRecognitionRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWordsSessionless");

            var localVarPath = "/v1/recognize/sessionless/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWordsSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of List&lt;WordDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WordDto>> RecognizeWordsSessionlessAsync (SessionlessRecognitionRequestDto body)
        {
             ApiResponse<List<WordDto>> localVarResponse = await RecognizeWordsSessionlessAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize speech without session and return word list 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request with user login data and recognition request</param>
        /// <returns>Task of ApiResponse (List&lt;WordDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WordDto>>> RecognizeWordsSessionlessAsyncWithHttpInfo (SessionlessRecognitionRequestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->RecognizeWordsSessionless");

            var localVarPath = "/v1/recognize/sessionless/words";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizeWordsSessionless", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WordDto>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WordDto>)));
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>WebSocketServerConfiguration</returns>
        public WebSocketServerConfiguration Start (Guid? xSessionId, StreamRequestDto body)
        {
             ApiResponse<WebSocketServerConfiguration> localVarResponse = StartWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>ApiResponse of WebSocketServerConfiguration</returns>
        public ApiResponse< WebSocketServerConfiguration > StartWithHttpInfo (Guid? xSessionId, StreamRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Start");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Start");

            var localVarPath = "/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebSocketServerConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebSocketServerConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebSocketServerConfiguration)));
        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>Task of WebSocketServerConfiguration</returns>
        public async System.Threading.Tasks.Task<WebSocketServerConfiguration> StartAsync (Guid? xSessionId, StreamRequestDto body)
        {
             ApiResponse<WebSocketServerConfiguration> localVarResponse = await StartAsyncWithHttpInfo(xSessionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start recognition stream 
        /// </summary>
        /// <exception cref="Cloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionId">Session identifier</param>
        /// <param name="body">Transaction parameters</param>
        /// <returns>Task of ApiResponse (WebSocketServerConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebSocketServerConfiguration>> StartAsyncWithHttpInfo (Guid? xSessionId, StreamRequestDto body)
        {
            // verify the required parameter 'xSessionId' is set
            if (xSessionId == null)
                throw new ApiException(400, "Missing required parameter 'xSessionId' when calling RecognizeApi->Start");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecognizeApi->Start");

            var localVarPath = "/v1/recognize/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xSessionId != null) localVarHeaderParams.Add("X-Session-Id", Configuration.ApiClient.ParameterToString(xSessionId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Start", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebSocketServerConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebSocketServerConfiguration) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebSocketServerConfiguration)));
        }

    }
}
